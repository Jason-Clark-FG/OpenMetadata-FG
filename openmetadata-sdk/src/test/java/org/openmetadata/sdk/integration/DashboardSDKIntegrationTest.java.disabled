package org.openmetadata.sdk.integration;

import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.openmetadata.schema.api.data.CreateChart;
import org.openmetadata.schema.api.data.CreateDashboard;
import org.openmetadata.schema.api.data.CreateDashboardDataModel;
import org.openmetadata.schema.api.services.CreateDashboardService;
import org.openmetadata.schema.entity.data.Chart;
import org.openmetadata.schema.entity.data.Dashboard;
import org.openmetadata.schema.entity.data.DashboardDataModel;
import org.openmetadata.schema.entity.services.DashboardService;
import org.openmetadata.schema.services.connections.dashboard.SupersetConnection;
import org.openmetadata.schema.type.DashboardConnection;
import org.openmetadata.schema.type.EntityReference;
import org.openmetadata.schema.type.TagLabel;
import org.openmetadata.sdk.BaseSDKTest;
import org.openmetadata.sdk.OM;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class DashboardSDKIntegrationTest extends BaseSDKTest {

  private DashboardService dashboardService;

  @Override
  protected void additionalSetUp() throws Exception {
    createDashboardService();
  }

  @Override
  protected void additionalTearDown() throws Exception {
    if (dashboardService != null) {
      try {
        OM.DashboardService.delete(dashboardService.getId().toString());
      } catch (Exception e) {
        // Ignore cleanup errors
      }
    }
  }

  private void createDashboardService() throws Exception {
    SupersetConnection supersetConnection =
        new SupersetConnection().withHostPort(URI.create("http://localhost:8088"));

    DashboardConnection connection = new DashboardConnection().withConfig(supersetConnection);

    CreateDashboardService createService =
        new CreateDashboardService()
            .withName(generateTestName("test_dashboard_service"))
            .withServiceType(
                org.openmetadata.schema.api.data.CreateDashboardDataModel.DashboardServiceType
                    .Superset)
            .withConnection(connection);

    dashboardService = OM.DashboardService.create(createService);
    assertNotNull(dashboardService);
  }

  @Test
  void testDashboardCRUDOperations() {
    String dashboardName = generateTestName("test_dashboard");

    CreateDashboard createRequest =
        new CreateDashboard()
            .withName(dashboardName)
            .withService(dashboardService.getFullyQualifiedName())
            .withDescription("Test dashboard for SDK integration")
            .withSourceUrl("http://localhost:8088/dashboard/1");

    Dashboard createdDashboard = OM.Dashboard.create(createRequest);
    assertNotNull(createdDashboard);
    assertNotNull(createdDashboard.getId());
    assertEquals(dashboardName, createdDashboard.getName());

    Dashboard retrievedDashboard = OM.Dashboard.retrieve(createdDashboard.getId().toString());
    assertNotNull(retrievedDashboard);
    assertEquals(createdDashboard.getId(), retrievedDashboard.getId());

    retrievedDashboard.setDescription("Updated dashboard description");
    Dashboard updatedDashboard = OM.Dashboard.update(retrievedDashboard);
    assertEquals("Updated dashboard description", updatedDashboard.getDescription());

    OM.Dashboard.delete(createdDashboard.getId().toString());

    assertThrows(
        Exception.class,
        () -> {
          OM.Dashboard.retrieve(createdDashboard.getId().toString());
        });
  }

  @Test
  void testChartCRUDOperations() {
    String chartName = generateTestName("test_chart");

    CreateChart createRequest =
        new CreateChart()
            .withName(chartName)
            .withService(dashboardService.getFullyQualifiedName())
            .withDescription("Test chart for SDK integration")
            .withChartType(org.openmetadata.schema.type.ChartType.Line);

    Chart createdChart = OM.Chart.create(createRequest);
    assertNotNull(createdChart);
    assertNotNull(createdChart.getId());
    assertEquals(chartName, createdChart.getName());

    Chart retrievedChart = OM.Chart.retrieve(createdChart.getId().toString());
    assertNotNull(retrievedChart);

    retrievedChart.setDescription("Updated chart description");
    Chart updatedChart = OM.Chart.update(retrievedChart);
    assertEquals("Updated chart description", updatedChart.getDescription());

    OM.Chart.delete(createdChart.getId().toString());

    assertThrows(
        Exception.class,
        () -> {
          OM.Chart.retrieve(createdChart.getId().toString());
        });
  }

  @Test
  void testDashboardDataModelCRUDOperations() {
    String dataModelName = generateTestName("test_data_model");

    CreateDashboardDataModel createRequest =
        new CreateDashboardDataModel()
            .withName(dataModelName)
            .withService(dashboardService.getFullyQualifiedName())
            .withDescription("Test data model for SDK integration")
            .withDataModelType(org.openmetadata.schema.type.DataModelType.SupersetDataModel);

    DashboardDataModel createdDataModel = OM.DashboardDataModel.create(createRequest);
    assertNotNull(createdDataModel);
    assertNotNull(createdDataModel.getId());
    assertEquals(dataModelName, createdDataModel.getName());

    DashboardDataModel retrievedDataModel =
        OM.DashboardDataModel.retrieve(createdDataModel.getId().toString());
    assertNotNull(retrievedDataModel);

    retrievedDataModel.setDescription("Updated data model description");
    DashboardDataModel updatedDataModel = OM.DashboardDataModel.update(retrievedDataModel);
    assertEquals("Updated data model description", updatedDataModel.getDescription());

    OM.DashboardDataModel.delete(createdDataModel.getId().toString());

    assertThrows(
        Exception.class,
        () -> {
          OM.DashboardDataModel.retrieve(createdDataModel.getId().toString());
        });
  }

  @Test
  void testDashboardWithCharts() {
    String dashboardName = generateTestName("test_dashboard_charts");
    String chartName = generateTestName("test_chart_for_dashboard");

    CreateChart createChart =
        new CreateChart()
            .withName(chartName)
            .withService(dashboardService.getFullyQualifiedName())
            .withChartType(org.openmetadata.schema.type.ChartType.Bar);

    Chart chart = OM.Chart.create(createChart);

    CreateDashboard createDashboard =
        new CreateDashboard()
            .withName(dashboardName)
            .withService(dashboardService.getFullyQualifiedName());

    Dashboard dashboard = OM.Dashboard.create(createDashboard);

    try {
      Dashboard dashboardWithCharts = OM.Dashboard.retrieve(dashboard.getId().toString(), "charts");

      List<EntityReference> charts = new ArrayList<>();
      charts.add(new EntityReference().withId(chart.getId()).withType("chart"));
      dashboardWithCharts.setCharts(charts);

      Dashboard updatedDashboard = OM.Dashboard.update(dashboardWithCharts);
      assertNotNull(updatedDashboard.getCharts());
      assertEquals(1, updatedDashboard.getCharts().size());

    } finally {
      OM.Dashboard.delete(dashboard.getId().toString());
      OM.Chart.delete(chart.getId().toString());
    }
  }

  @Test
  void testDashboardWithTags() {
    String dashboardName = generateTestName("test_dashboard_tags");
    CreateDashboard createRequest =
        new CreateDashboard()
            .withName(dashboardName)
            .withService(dashboardService.getFullyQualifiedName());

    Dashboard dashboard = OM.Dashboard.create(createRequest);
    assertNotNull(dashboard);

    try {
      Dashboard dashboardWithTags = OM.Dashboard.retrieve(dashboard.getId().toString(), "tags");

      List<TagLabel> tags = new ArrayList<>();
      tags.add(
          new TagLabel()
              .withTagFQN("PersonalData.Personal")
              .withSource(TagLabel.TagSource.CLASSIFICATION)
              .withState(TagLabel.State.CONFIRMED));
      dashboardWithTags.setTags(tags);

      Dashboard updatedDashboard = OM.Dashboard.update(dashboardWithTags);
      assertNotNull(updatedDashboard.getTags());
      assertEquals(1, updatedDashboard.getTags().size());

    } finally {
      OM.Dashboard.delete(dashboard.getId().toString());
    }
  }
}
